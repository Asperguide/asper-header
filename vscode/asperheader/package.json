{
  "name": "asperheader",
  "displayName": "Asper Header",
  "description": "This is an extension that will allow the developers of the Asperguide project to sign their file in an easier way and quicker",
  "version": "1.0.7",
  "publisher": "HenryLetellier",
  "icon": "images/icon/favicon_transparent.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Asperguide/asper-header.git",
    "directory": "vscode/asperheader"
  },
  "bugs": {
    "url": "https://github.com/Asperguide/asper-header/issues"
  },
  "homepage": "https://asperguide.github.io/asper-header/",
  "engines": {
    "vscode": "^1.104.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:asperheader.helloWorld",
    "onCommand:asperheader.sayHelloWorld",
    "onCommand:asperheader.injectHeader",
    "onCommand:asperheader.refreshHeader"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "asperheader.helloWorld",
        "title": "AsperHeader: Hello World"
      },
      {
        "command": "asperheader.sayHelloWorld",
        "title": "AsperHeader: World with File Info"
      },
      {
        "command": "asperheader.author",
        "title": "AsperHeader: Author"
      },
      {
        "command": "asperheader.darling",
        "title": "AsperHeader: Darling Character"
      },
      {
        "command": "asperheader.displayRandomLogo",
        "title": "AsperHeader: Display a random ascii logo in it's own file"
      },
      {
        "command": "asperheader.injectHeader",
        "title": "AsperHeader: Add a header to the file"
      },
      {
        "command": "asperheader.refreshHeader",
        "title": "AsperHeader: Refresh the header located in the file that you asked to trigger, this also gets triggered with the save"
      }
    ],
    "keybindings": [
      {
        "command": "asperheader.injectHeader",
        "key": "ctrl+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.refreshHeader",
        "key": "ctrl+alt+u",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.displayRandomLogo",
        "key": "ctrl+alt+shift+l",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.darling",
        "key": "ctrl+alt+shift+d",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.author",
        "key": "ctrl+alt+shift+a",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.injectHeader",
        "key": "cmd+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.refreshHeader",
        "key": "cmd+alt+u",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.displayRandomLogo",
        "key": "cmd+alt+shift+l",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.darling",
        "key": "cmd+alt+shift+d",
        "when": "editorTextFocus"
      },
      {
        "command": "asperheader.author",
        "key": "cmd+alt+shift+a",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Asper Header",
      "properties": {
        "asperheader.extensionName": {
          "type": "string",
          "default": "AsperHeader",
          "description": "The name of the extension. Appears in generated headers as the source tool."
        },
        "asperheader.projectCopyright": {
          "type": "string",
          "default": "(c) Asperguide",
          "description": "The copyright line that will be inserted into generated headers."
        },
        "asperheader.headerOpenerDecorationOpen": {
          "type": "string",
          "default": "+==== ",
          "description": "The opening marker used at the start of the header border."
        },
        "asperheader.headerOpenerDecorationClose": {
          "type": "string",
          "default": " =================+",
          "description": "The closing marker used at the end of the header border."
        },
        "asperheader.headerCommentSpacing": {
          "type": "string",
          "default": " ",
          "description": "The spacing between the comment character(s) and the rest of the header content."
        },
        "asperheader.telegraphBegin": {
          "type": "string",
          "default": "BEGIN",
          "description": "The keyword used to mark the start of a header block."
        },
        "asperheader.telegraphEnd": {
          "type": "string",
          "default": "END",
          "description": "The keyword used to mark the end of a header block."
        },
        "asperheader.telegraphBlockStop": {
          "type": "string",
          "default": "/STOP",
          "description": "Marker used to end multiline sections (e.g. DESCRIPTION, REQUIREMENTS)."
        },
        "asperheader.telegraphEndOfTransmission": {
          "type": "string",
          "default": "// AR",
          "description": "End-of-transmission marker. Appears just before the closing header border."
        },
        "asperheader.headerAddBlankLineAfterMultiline": {
          "type": "boolean",
          "default": false,
          "description": "If true, inserts a blank line after each multiline section (DESCRIPTION, REQUIREMENTS, etc.)."
        },
        "asperheader.headerKeyDefinitionSeparator": {
          "type": "string",
          "default": ": ",
          "description": "The separator string used between keys (like FILE, PROJECT) and their values."
        },
        "asperheader.headerLogoKey": {
          "type": "string",
          "default": "LOGO",
          "description": "The keyword used to identify the logo block in the header."
        },
        "asperheader.headerProjectKey": {
          "type": "string",
          "default": "PROJECT",
          "description": "The keyword used for the project name field."
        },
        "asperheader.headerFileKey": {
          "type": "string",
          "default": "FILE",
          "description": "The keyword used for the file name field."
        },
        "asperheader.headerCreationDateKey": {
          "type": "string",
          "default": "CREATION DATE",
          "description": "The keyword used for the file creation date field."
        },
        "asperheader.headerLastModifiedKey": {
          "type": "string",
          "default": "LAST Modified",
          "description": "The keyword used for the last modified timestamp field."
        },
        "asperheader.headerDescriptionKey": {
          "type": "string",
          "default": "DESCRIPTION",
          "description": "The keyword used for the description field."
        },
        "asperheader.headerCopyrightKey": {
          "type": "string",
          "default": "COPYRIGHT",
          "description": "The keyword used for the copyright field."
        },
        "asperheader.headerTagKey": {
          "type": "string",
          "default": "TAG",
          "description": "The keyword used for the tags/keywords field."
        },
        "asperheader.headerPurposeKey": {
          "type": "string",
          "default": "PURPOSE",
          "description": "The keyword used for the purpose field."
        },
        "asperheader.headerTimeSeperatorHour": {
          "type": "string",
          "default": ":",
          "description": "The separator between hours and minutes in time values."
        },
        "asperheader.headerTimeSeperatorMinute": {
          "type": "string",
          "default": ":",
          "description": "The separator between minutes and seconds in time values."
        },
        "asperheader.headerTimeSeperatorSecond": {
          "type": "string",
          "default": "",
          "description": "The separator placed after seconds in time values. Leave empty for none."
        },
        "asperheader.headerTimeAndDateSeperator": {
          "type": "string",
          "default": " ",
          "description": "The separator string between the time and date values."
        },
        "asperheader.headerDateSeperatorDay": {
          "type": "string",
          "default": "-",
          "description": "The separator between the day and month in date values."
        },
        "asperheader.headerDateSeperatorMonth": {
          "type": "string",
          "default": "-",
          "description": "The separator between the month and year in date values."
        },
        "asperheader.headerDateSeperatorYear": {
          "type": "string",
          "default": "",
          "description": "Optional suffix after the year in date values. Leave empty for none."
        },
        "asperheader.headerLogo": {
          "type": "string[]",
          "default": [
            "..........####...####..........",
            "......###.....#.#########......",
            "....##........#.###########....",
            "...#..........#.############...",
            "...#..........#.#####.######...",
            "..#.....##....#.###..#...####..",
            ".#.....#.##...#.##..##########.",
            "#.....##########....##...######",
            "#.....#...##..#.##..####.######",
            ".#...##....##.#.##..###..#####.",
            "..#.##......#.#.####...######..",
            "..#...........#.#############..",
            "..#...........#.#############..",
            "...##.........#.############...",
            "......#.......#.#########......",
            ".......#......#.########.......",
            ".........##.##...#####........."
          ],
          "description": "The default ASCII logo used when random logos are disabled."
        },
        "asperheader.maxScanLength": {
          "type": "number",
          "default": 100,
          "description": "The maximum number of lines to scan in a file when checking for an existing header."
        },
        "asperheader.enableDebug": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable debug logging for the extension."
        },
        "asperheader.refreshOnSave": {
          "type": "boolean",
          "default": true,
          "description": "If true, the header will automatically refresh (update last modified date, etc.) whenever the file is saved."
        },
        "asperheader.promptToCreateIfMissing": {
          "type": "boolean",
          "default": true,
          "description": "If true, prompts the user to create a header if none is found when saving a file."
        },
        "asperheader.randomLogo": {
          "type": "boolean",
          "default": false,
          "description": "If true, a random ASCII logo will be chosen from the logo bank for each generated header."
        },
        "asperheader.extensionIgnore": {
          "type": "string[]",
          "default": [],
          "description": "A list of file globs or extensions where the header injection should not run on save."
        },
        "asperheader.useWorkspaceNameWhenAvailable": {
          "type": "boolean",
          "default": false,
          "description": "If true, the name of the active workspace will be used as the displayed project name."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "vsce:package": "npx vsce package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.9",
    "esbuild-plugin-copy": "^2.1.1",
    "eslint": "^9.34.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.9.2"
  }
}
